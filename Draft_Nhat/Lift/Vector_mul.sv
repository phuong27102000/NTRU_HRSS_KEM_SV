module vector_mul #(parameter NUMS_OF_A = 700*13,parameter NUMS_PARALLEL = NUMS_OF_A/100, parameter NUMS_PARALLEL_2=(NUMS_OF_A+13-13*3)/2)
(
input logic clk,
input logic en,
input logic [NUMS_OF_A:1] v,
output logic [NUMS_OF_A+13:1] b_out
);
//11=1111111111111
//01=0000000000001
//00=0000000000000
logic [NUMS_OF_A+13:1]b_temp,b_temp_3,b_out_2;
logic [NUMS_PARALLEL:1]b_temp_2;
logic [NUMS_OF_A:1] a_S3_out_mod,a_S3_out_mod_1,a_S3_out_mod_2,a_S3_out;
logic [NUMS_OF_A+13:1] a,m,n,a_temp,a_S3_temp,a_temp_2;
logic [NUMS_PARALLEL:1]a1,a2,a3,a4,a6,a7,a9;
logic [13:1]t1,t2,t3,t4,t5,t6,t7,t8,t9;
logic [NUMS_PARALLEL_2+13*3:1] k1,k2,k3;
logic [NUMS_OF_A:1] z1,z2,z3;
assign z1=9100'd
assign z2=9100'd
assign z3=9100'd
integer dem,dem1,dem2,dem3;
genvar i;
generate 
	for (i=1;i<=NUMS_OF_A/2-1;i=i+13) begin
		mul_in_S3 entity_0 (a1[i+12:i],a2[i+12:i],a3[i+12:i]);
		mul_in_S3 entity_1 (a4[i+12:i],a2[i+12:i],a6[i+12:i]);
		mul_in_S3 entity_2 (a7[i+12:i],a2[i+12:i],a9[i+12:i]);
	end
endgenerate
genvar j;
generate
	for (j=40;j<40+NUMS_PARALLEL_2-1;j=j+13) begin
		sub_in_S3_3 entity_0 (k1[j-27:j-39],k2[j+12:j],k2[j-1:j-13],k2[j-14:j-26],k1[j+12:j]);
	end
endgenerate
N_13_bit_adder N_13_bit_adder (a3,t1);
adder_13_bit adder_13_bit (t1,t2,1'b0,a[13:1]);
N_13_bit_adder N_13_bit_adder_1 (a6,t4);
adder_13_bit adder_13_bit_1 (t4,t5,1'b0,a[26:14]);
N_13_bit_adder N_13_bit_adder_2 (a9,t7);
adder_13_bit adder_13_bit_2 (t7,t8,1'b0,a[39:27]);
//S3
genvar o;
generate 
	for(o=1;o<NUMS_PARALLEL;o=o+13) begin
		adder_13_bit entity_0 ( a_S3_temp[o+12:o], ~a[NUMS_OF_A+13:NUMS_OF_A+1],1'b1,a_S3_out[o+12:o]);
		mod3 entity_1 ({a_S3_out[o+12],1'b0,a_S3_out[o+11:o]},a_S3_out_mod[o+12:o]);
	end
endgenerate
//
//
genvar p;
generate
	for(p=14;p<=NUMS_PARALLEL+13;p=p+13) begin
		adder_13_bit entity_2 (b_temp[p-1:p-13],~b_temp[p+12:p],1'b1,b_temp_2[p-1:p-13]);
	end	
endgenerate
//
always @(posedge clk) begin

if (en==1) begin
	dem=0;
	dem1=0;
	dem2=0;
	dem3=0;
	a_temp=0;
	a[NUMS_OF_A+13:40]=0;
	a_S3_out_mod_1=0;
	a_S3_out_mod_2=0;
	//k1=0;k2=0;k3=0;
end
else begin
	if (dem==NUMS_OF_A/NUMS_PARALLEL) begin
		dem=NUMS_OF_A;
		a_temp_2=a;
	end
	else if (dem==NUMS_OF_A) begin 
		if (dem1==3) begin
			a[NUMS_OF_A+13:40]=m[NUMS_OF_A+13:40];
			dem1=dem1+1;
		end
		else if (dem1==4) begin
			if (dem2==NUMS_OF_A/NUMS_PARALLEL+1) begin 
				if (dem3==NUMS_OF_A/NUMS_PARALLEL+1) begin
				b_out[NUMS_OF_A+13:NUMS_OF_A+1]=a_S3_out_mod_1[NUMS_OF_A:NUMS_OF_A-12];
				b_out[13:1]=~a_S3_out_mod_1[13:1]+1;
				end
				else begin
					b_temp=a_S3_out_mod_1>>(dem3*NUMS_PARALLEL);
					b_out=b_out_2;
					if (dem3 !=0) begin
					b_out[NUMS_OF_A+13:NUMS_OF_A-NUMS_PARALLEL+14]=b_temp_2;
					b_out_2=b_out>>NUMS_PARALLEL;
					end
					dem3=dem3+1;
				end 
			end
				
			else begin
				a_S3_temp=a>>(dem2*NUMS_PARALLEL);
				
				a_S3_out_mod_1=a_S3_out_mod_2;
				if (dem2 != 0) begin
				a_S3_out_mod_1[NUMS_OF_A:NUMS_OF_A-NUMS_PARALLEL+1]=a_S3_out_mod[NUMS_PARALLEL:1];
				a_S3_out_mod_2=a_S3_out_mod_1>>NUMS_PARALLEL; 
				end
				dem2=dem2+1;
			end
		end
		else begin
			m=n;
			if (dem1!=0) begin
			a_temp_2=k1;
			a_temp_2[40+NUMS_PARALLEL_2-1:40]=k1[40+NUMS_PARALLEL_2-1:40];
			k1[39:1]=a_temp_2>>(NUMS_PARALLEL_2);
			end
			else k1[39:1]=a_temp_2[39:1];
			k2=v>>(NUMS_PARALLEL_2*dem1);
			if (dem1!=0) begin
			m[NUMS_OF_A+13:NUMS_OF_A+13-NUMS_PARALLEL_2+1]=k1[40+NUMS_PARALLEL_2-1:40];
			n=m>>NUMS_PARALLEL_2;	
			end
			dem1=dem1+1;
	end
	
	end
 
	else begin
		if (dem!=0) a_temp=a;
		else ;
		a2=v>>(NUMS_PARALLEL*dem);
		a1=z1>>(NUMS_PARALLEL*dem);
		a4=z2>>(NUMS_PARALLEL*dem);
		a7=z3>>(NUMS_PARALLEL*dem);
		t2=a_temp[13:1];
		t5=a_temp[26:14];
		t8=a_temp[39:27];
		dem=dem+1;
		
		
	end
		
end
end

endmodule
module sub_in_S3_3(
input logic [12:0]a,b,c,d,
output logic [12:0]e);
logic [12:0] t,t1;
adder_13_bit entity_0(a,~b,1'b1,t);
adder_13_bit entity_1(t,~c,1'b1,t1);
adder_13_bit entity_2(t1,~d,1'b1,e);
endmodule
module mul_in_S3(
input logic [12:0] a,
input logic [12:0] b,
output logic [12:0]c);
always_comb begin
	if ((a==13'd0)||(b==13'd0))
		c=13'd0;
	else if ((a==13'd1)&&(b==13'd1) || (a==13'd8191)&&(b==13'd8191))
		c=13'd1;
	else  
		c=13'd8191;
end
endmodule
module N_13_bit_adder #(parameter N=7*13)
(
input logic [N:1] A,
output logic [13:1] S		
);
logic [N+13:1] B;
assign B[13:1]=13'd0;
assign S=B[N+13:N+1];

genvar i;
generate
	for (i=1; i<=N-1; i=i+13) begin
		adder_13_bit entity_0 ( B[i+12:i], A[i+12:i],1'b0,B[i+25:i+13]);
	end
endgenerate
endmodule

module adder_13_bit(
    input logic [12:0] A,
    input logic [12:0] B,
    input logic C,
    output logic [12:0] S
    );

    assign S=A+B+C;

endmodule
